<?php
/**
 * @file
 * Rules actions and conditions based on url arguments.
 */

/**
 * Implementation of hook_rules_action_info().
 * 
 * Provide a new action that akes the value of an URL argument avaliable as a new variable to rules.
 */
function rules_url_argument_rules_action_info() {
  return array(
    'rules_url_argument_rules_action_get_argument_from_url' => array(
      'label' => t('Provide URL argument value'),
      'group' => t('URL argument'),
      'parameter' => array(
        'argument_name' => array(
          'type' => 'text',
          'label' => t('URL argument name'),
        ),
      ),
      'provides' => array(
        'argument_from_url' => array(
          'type' => 'text',
          'label' => t('Argument from URL'),
        ),
      ),
    )
  );
}

/**
 * Action implementation. 
 * 
 * Makes the value of an URL argument avaliable as a new variable to rules.
 */
function rules_url_argument_rules_action_get_argument_from_url($argument_name) {
  if (!empty($_GET[$argument_name])) {
    return array('argument_from_url' => $_GET[$argument_name]);
  }
}

 
/**
 * Implementation of hook_rules_condition_info().
 */
function rules_url_argument_rules_condition_info() {
  return array(
    'rules_url_argument_argument_exists' => array(
      'label' => t('Check if URL argument exists'),
      'parameter' => array(
        'argument' => array(
          'type' => 'text', 
          'label' => t('Argument')
        ),
      ),
      'group' => t('URL argument'),
      'callbacks' => array(
        'execute' => 'rules_url_argument_argument_exists',
      ),
    ),
    'rules_url_argument_argument_value' => array(
      'label' => t('Compare URL argument value'),
      'parameter' => array(
        'argument' => array(
          'type' => 'pathrules_url_argument', 
          'label' => t('Argument')
        ),
        'argument_value' => array(
          'type' => 'text', 
          'label' => t('Argument value')
        ),
        'operation' => array(
          'type' => 'text',
          'label' => t('Comparison operation'),
          'options list' => 'rules_data_text_comparison_operation_list',
          'restriction' => 'input',
          'default value' => 'contains',
          'optional' => TRUE,
          'description' => t('In case the comparison operation @regex is selected, the matching pattern will be interpreted as a <a href="@regex-wikipedia">regular expression</a>.  Tip: <a href="@RegExr">RegExr: Online Regular Expression Testing Tool</a> is helpful for learning, writing, and testing Regular Expressions.', array('@regex-wikipedia' => 'http://en.wikipedia.org/wiki/Regular_expression', '@RegExr' => 'http://gskinner.com/RegExr/', '@regex' => t('regular expression'))),
        ),
      ),
      'group' => t('URL argument'),
      'callbacks' => array(
        'execute' => 'rules_url_argument_argument_value',
      ),
    ),
  );
}

/**
 * Rules condition callback.
 * 
 * Checks if the specified URL argument is set.
 */
function rules_url_argument_argument_exists($argument) {
  return !empty($_GET[$argument]);
}

/**
 * Rules condition callback.
 * 
 * Compare the argument value using the rules_data_text_comparsion() function.
 */
function rules_url_argument_argument_value($argument, $argument_value, $op) {
  return rules_data_text_comparison($_GET[$argument], $argument_value, $op);
}
