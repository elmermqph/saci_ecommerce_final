<?php
/**
 * @file
 * Module: uc_extra_fields_pane.module
 *
 * This module extends Ubercart panes by allowing you to set values
 * by a variety of methods to variables that will show up in the order.
 *
 * co-authored by:
 * blackice78 - Maurizio Ganovelli - drupal@ganovelli.it
 * and
 * panthar - Bobby Kramer - panthar1@gmail.com
 * and
 * MegaChriz - megachriz@hotmail.com
 *
 */

// -------------------------------------------------------------------
// DRUPAL HOOKS
// -------------------------------------------------------------------

/**
 * Implements hook_help().
 * @param string $path
 * @param array $arg
 * @return string
 */
function uc_extra_fields_pane_help($path, $arg = array()) {
  switch ($path) {
    case 'admin/help#uc_extra_fields_pane':
      $output = '<p>' . t('This modules allows an administrator to define additional (billing and shipping) address fields (i.e. VAT) in Ubercart e-commerce suite. These fields will be available during checkout process and in order handling pages.') . '</p>';

      $output .= '<h2>' . t('Adding fields for checkout') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('Extra address fields for the delivery and billing checkout panes can be added at the <a href="@address-fields-page-url">@address-fields-page-title</a> page.', array('@address-fields-page-url' => url('admin/store/settings/countries/fields'), '@address-fields-page-title' => t('Address fields'))) . '</li>';
      $output .= '</ul>';

      $output .= '<h2>' . t('About the field types') . '</h2>';
      $output .= '<ul>';
      $output .= '<li><strong>' . t('Textfield') . '</strong><br />' . t('This field type adds a simple text field to the form. This field can be pre-filled with a default value.') . '</li>';
      $output .= '<li><strong>' . t('Select list') . '</strong><br />' . t('This field type adds a selection field to the form (users can select a value from a dropdown menu). In the value section you can define the available options in the format "safe_key|readable part". The <em>safe_key</em> part is the part that will be saved in the database. The <em>readable</em> part is what will be presented to the user. IMPORTANT NOTE: if you want to make this field required, make sure that the first option of the list has an <em>empty</em> safe key. You can insert an empty safe key by typing a space. Example: !example', array('!example' => '<br />' . UCXF_Field::get_example(UCXF_Field::UCXF_WIDGET_TYPE_SELECT))) . '</li>';
      $output .= '<li><strong>' . t('Checkbox') . '</strong><br />' . t('This field type adds a checkbox to the form.') . '</li>';
      $output .= '<li><strong>' . t('Constant') . '</strong><br />' . t('This field type adds a value to the form which can not be changed by the customer. It is just displayed as plain text. However, admins who can change the Ubercart order are able to adjust the value of this field, because then it\'s displayed as a text field. Example: !example', array('!example' => '<br />' . UCXF_Field::get_example(UCXF_Field::UCXF_WIDGET_TYPE_CONSTANT))) . '</li>';
      $output .= '<li><strong>' . t('PHP string') . '</strong><br />' . t('This field type is similar to the constant field type. The difference is that the shown value can be defined with PHP code, which means you could get this value from everywhere. In the value section you should return a string, for example: !example', array('!example' => '<br />' . UCXF_Field::get_example(UCXF_Field::UCXF_WIDGET_TYPE_PHP))) . '</li>';
      $output .= '<li><strong>' . t('PHP select list') . '</strong><br />' . t("This field type is similar to the select list field type. The difference is that you can build the option list with PHP. Be sure to return an array with 'key' => 'value'. IMPORTANT NOTE: if you want to make this field required, make sure that the first option has an <em>empty</em> key. This may be a space, but it can also be an empty string. Example: !example", array('!example' => '<br />' . UCXF_Field::get_example(UCXF_Field::UCXF_WIDGET_TYPE_PHP_SELECT))) . '</li>';
      $output .= '</ul>';
      return $output;
    case 'admin/store/settings/countries/fields/add':
    case 'admin/store/settings/countries/fields/%/edit':
      if (module_exists('help')) {
        return t('For more help, visit the <a href="@help-page">Extra Fields Pane help page</a>.', array('@help-page' => url('admin/help/uc_extra_fields_pane')));
      }
      else {
        drupal_set_message(t('If you <a href="@modules">enable the help module (Drupal core)</a>, Extra Fields Pane will provide an instruction page about the field types. Alternatively, you can find this information also in the README-file.', array('@modules' => url('admin/modules'))));
      }
  }
}

/**
 * Implements hook_menu().
 * @return array
 */
function uc_extra_fields_pane_menu() {
  // Extra address fields
  $items['admin/store/settings/countries/fields/add'] = array(
    'title' => 'Add an address field',
    'description' => 'Add extra address fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_addressfield_form'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/countries/fields/%uc_extra_fields_pane_field/edit'] = array(
    'title' => 'Modify address field',
    'description' => 'Edit an address field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_addressfield_form', 5),
    'access callback' => 'uc_extra_fields_pane_access',
    'access arguments' => array(5, 'edit'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/countries/fields/%uc_extra_fields_pane_field/delete'] = array(
    'title' => 'Delete address field',
    'description' => 'Delete an address field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_field_delete_confirm_form', 5),
    'access callback' => 'uc_extra_fields_pane_access',
    'access arguments' => array(5, 'delete'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function uc_extra_fields_pane_permission() {
  return array(
    'use php fields' => array(
      'title' => t('Use PHP fields'),
    ),
  );
}

/**
 * Check if user has access to this field.
 *
 * Users that don't have the permission "use php fields" may not edit
 * fields of this type.
 *
 * @param UCXF_Field $field
 *   The field for which access is requested.
 * @param string $op
 *   The operation that is performed on the field.
 *
 * @return boolean
 */
function uc_extra_fields_pane_access(UCXF_Field $field, $op) {
  switch ($op) {
    case 'edit':
      switch ($field->value_type) {
        case UCXF_Field::UCXF_WIDGET_TYPE_PHP:
        case UCXF_Field::UCXF_WIDGET_TYPE_PHP_SELECT:
          return user_access('use php fields');
      }
      break;
  }
  return user_access('administer store');
}

// -------------------------------------------------------------------
// UBERCART HOOKS
// -------------------------------------------------------------------

/**
 * Implements hook_uc_order().
 *
 * @param string $op
 *   The action being performed.
 * @param object $order
 *   The Ubercart order object.
 * @param mixed $arg2
 *   This is variable and is based on the value of $op.
 *
 * @return void
 */
function uc_extra_fields_pane_uc_order($op, &$order, $arg2) {
  $aElementTypes = array(
    'delivery' => array(
      'pane_type' => 'extra_delivery',
      'element_type' => UCXF_Value::UCXF_VALUE_ORDER_DELIVERY,
      'prefix' => 'delivery_',
      'uc_addresses_type' => 'shipping',
    ),
    'billing' => array(
      'pane_type' => 'extra_billing',
      'element_type' => UCXF_Value::UCXF_VALUE_ORDER_BILLING,
      'prefix' => 'billing_',
      'uc_addresses_type' => 'billing',
    ),
  );

  switch ($op) {
    case 'save':
      // Save values per element type.
      foreach ($aElementTypes as $element_type => $data) {
        $fields = UCXF_FieldList::getFieldsFromPane($data['pane_type']);
        foreach ($fields as $fieldname => $field) {
          if (isset($order->uc_addresses[$data['uc_addresses_type']])) {
            $address = $order->uc_addresses[$data['uc_addresses_type']];
            try {
              $value = $address->getField($fieldname);
              if (!is_null($value)) {
                uc_extra_fields_pane_value_save(
                  array(
                    'element_id' => $order->order_id,
                    'element_type' => $data['element_type'],
                    'field_id' => $field->field_id,
                    'value' => $value,
                  )
                );
              }
            }
            catch (UcAddressesException $e) {
              // Log any Ubercart Addresses exceptions.
              watchdog('ucxf', 'An exception occured when trying to save value for field %field when editing order @order_id: @exception', array('%field' => $fieldname, '@order_id' => $order->order_id, '@exception' => $e->getMessage()), WATCHDOG_WARNING);
            }
          }
        }
      }
      break;

    case 'load':
      // Set address field values for Ubercart Addresses.
      // Delivery fields
      if (isset($order->uc_addresses['shipping'])) {
        $value_list = uc_extra_fields_pane_value_list_load($order->order_id, UCXF_Value::UCXF_VALUE_ORDER_DELIVERY);
        foreach ($value_list as $oValue) {
          $order->uc_addresses['shipping']->setField($oValue->db_name, $oValue->value);
        }
        $order->uc_addresses['shipping']->ucxf_pane_type = 'extra_delivery';
      }

      // Billing fields
      if (isset($order->uc_addresses['billing'])) {
        $value_list = uc_extra_fields_pane_value_list_load($order->order_id, UCXF_Value::UCXF_VALUE_ORDER_BILLING);
        foreach ($value_list as $oValue) {
          $order->uc_addresses['billing']->setField($oValue->db_name, $oValue->value);
        }
        $order->uc_addresses['billing']->ucxf_pane_type = 'extra_billing';
      }
      break;

    case 'delete':
      // Delete Extra Fields Pane values belonging to order.
      db_delete('uc_extra_fields_values')
        ->condition('element_id', $order->order_id)
        ->condition('element_type', array(UCXF_Value::UCXF_VALUE_ORDER_DELIVERY, UCXF_Value::UCXF_VALUE_ORDER_BILLING), 'IN')
        ->execute();
      break;
  }
}

// -------------------------------------------------------------------
// UBERCART ADDRESSES HOOKS
// Ubercart Addresses 7.x-1.x integration.
// -------------------------------------------------------------------

/**
 * Implements hook_uc_addresses_fields().
 *
 * Register all address fields used by Ubercart Addresses.
 *
 * @return array
 */
function uc_extra_fields_pane_uc_addresses_fields() {
  try {
    $data = array();
    $fields = UCXF_FieldList::getAllAddressFields();

    foreach ($fields as $field) {
      $data[$field->db_name] = array(
        'title' => $field->output('label'),
        'handler' => 'UcAddressesUCXFHandler',
        'display_settings' => array(
          'default' => TRUE,
          'address_view' => $field->may_display('uc_addresses'),
          'checkout_review' => $field->may_display('review'),
          'order_view' => $field->may_display('order'),
        ),
      );
    }

    return $data;
  }
  catch (UCXF_Exception $e) {
    $e->printMessage();
    $e->logError();
  }
}

/**
 * Implements hook_uc_addresses_field_handlers().
 *
 * Register form fields and their definitions.
 *
 * @return array
 */
function uc_extra_fields_pane_uc_addresses_field_handlers() {
  $path = drupal_get_path('module', 'uc_extra_fields_pane') . '/includes';

  $info = array();
  $info['UcAddressesUCXFHandler'] = array(
    'hidden' => FALSE,
    'handler' => array(
      'parent' => 'UcAddressesFieldHandler',
      'class' => 'UcAddressesUCXFHandler',
      'file' => 'uc_addresses.handlers.inc',
      'path' => $path,
    ),
  );

  return $info;
}

/**
 * Implements hook_uc_addresses_load_address().
 * @param UcAddressesAddress $address
 *   The address object
 * @param object $obj
 *   The fetched database record
 * @return void
 * @todo Update when field system in Ubercart Addresses is ready
 */
function uc_extra_fields_pane_uc_addresses_address_load($address, $obj) {
  // Load values
  $value_list = uc_extra_fields_pane_value_list_load($address->getId(), UCXF_Value::UCXF_VALUE_ADDRESS);

  foreach ($value_list as $oValue) {
    $address->setField($oValue->db_name, $oValue->getValue());
  }
}

/**
 * Implements hook_uc_addresses_insert_address().
 * @param UcAddressesAddress $address
 *   The address object
 * @return void
 */
function uc_extra_fields_pane_uc_addresses_address_insert($address) {
  // Load fields for uc_addresses
  $fields = UCXF_FieldList::getAllAddressFields();

  foreach ($fields as $field) {
    $value = $address->getField($field->db_name);
    uc_extra_fields_pane_value_save(
      array(
        'element_id' => $address->getId(),
        'element_type' => UCXF_Value::UCXF_VALUE_ADDRESS,
        'field_id' => $field->field_id,
        'value' => $address->getField($field->db_name),
      )
    );
  }
}

/**
 * Implements hook_uc_addresses_update_address().
 * @param UcAddressesAddress $address
 *   The address object
 * @return void
 * @todo Untested
 */
function uc_extra_fields_pane_uc_addresses_address_update($address) {
  // Do the same as when an address is inserted
  uc_extra_fields_pane_uc_addresses_address_insert($address);
}

/**
 * Implements hook_uc_addresses_delete_address().
 * @param UcAddressesAddress $address
 *   The address object
 * @return void
 */
function uc_extra_fields_pane_uc_addresses_address_delete($address) {
  // Delete all values associated with this address.
  db_delete('uc_extra_fields_values')
    ->condition('element_id', $address->getId())
    ->condition('element_type', UCXF_Value::UCXF_VALUE_ADDRESS)
    ->execute();
}

/**
 * Implements hook_uc_addresses_preprocess_address_alter().
 *
 * Don't display address fields in panes if is set they shouldn't
 * appear in that pane. (UCXF_AddressField->pane_types setting)
 *
 * @param array $fields
 *   An array containing the field data.
 * @param UcAddressesAddress $address
 *   The address object.
 * @param string $context
 *   The context in which the fields will be displayed.
 *
 * @return void
 */
function uc_extra_fields_pane_uc_addresses_preprocess_address_alter(&$fields, $address, $context) {
  if (!empty($address->ucxf_pane_type)) {
    // Check which fields may be displayed in one pane only.
    // Remove fields that may not be shown in the active pane.
    $ucxf_fields = UCXF_FieldList::getAllAddressFields();
    foreach ($ucxf_fields as $ucxf_field) {
      if (isset($fields[$ucxf_field->db_name]) && !$ucxf_field->in_pane($address->ucxf_pane_type)) {
        unset($fields[$ucxf_field->db_name]);
      }
    }
  }
}

/**
 * Implements hook_uc_addresses_select_addresses().
 *
 * Provide addresses from previous orders combined with extra address fields.
 *
 * @param int $uid
 *   The user ID to select addresses for
 * @param string $context
 *   The context in which the addresses are used:
 *   - checkout_form
 *   - order_form
 * @param string $type
 *   The type of address to select addresses for (shipping or billing)
 *
 * @return array
 *   An array of address arrays.
 *
 * @todo Implement with hook_query_alter() instead?
 */
function uc_extra_fields_pane_uc_addresses_select_addresses($uid, $context, $type) {
  return;
  /*
  // Check if user has any saved addresses
  $addresses = uc_addresses_uc_addresses_select_addresses($uid, $context, $type);
  foreach ($addresses as $address) {
    if ($address instanceof UcAddressesAddress) {
      if (!$address->isNew()) {
        // Don't provide addresses if the list contains saved addresses.
        return array();
      }
    }
  }
  // Return addresses from previous orders combined with extra address fields.
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/address_select');
  $addresses = uc_extra_fields_pane_get_addresses($uid, $type);
  return $addresses;
  */
}

/**
 * Implements hook_uc_addresses_select_addresses_alter().
 *
 * Remove all uc_order addresses.
 *
 * @param array $addresses
 *   An array of UcAddressesAddress instances.
 * @param int $uid
 *   The user ID to select addresses for
 * @param string $context
 *   The context in which the addresses are used:
 *   - checkout_form
 *   - order_form
 * @param string $type
 *   The type of address to select addresses for (shipping or billing)
 *
 * @return void
 *
 * @todo Implement?
 */
function uc_extra_fields_pane_uc_addresses_select_addresses_alter(&$addresses, $uid, $context, $type = 'billing') {
  return;
  /*
  foreach ($addresses as $index => $address) {
    if ($address->module == 'uc_order') {
      unset($addresses[$index]);
    }
  }
  */
}

// -------------------------------------------------------------------
// UCXF HOOKS
// -------------------------------------------------------------------

/**
 * Implements hook_ucxf_display_options().
 * @param ucxf_field $field
 * @return array
 */
function uc_extra_fields_pane_ucxf_display_options($field) {
  $options = array(
    'checkout' => array(
      'title' => t('Checkout page'),
      'description' => t('Uncheck to hide the field on the checkout page. The field will still be added to the order, and will appear in the order confirmation as well. This setting only applies when the field type is %php or %constant.', array('%php' => t('PHP string'), '%constant' => t('Constant'))),
    ),
    'review' => array(
      'title' => t('Order review page'),
      'description' => t('The page where the order is reviewed by a customer before the order is submitted.'),
    ),
    'order' => array(
      'title' => t('Order view page'),
      'description' => t('The page where the details of the order can be viewed after the order is submitted.'),
    ),
  );

  if ($field instanceof UCXF_AddressField) {
    $options['uc_addresses'] = array(
      'title' => t('Address Book'),
      'description' => t('The page where the user has an overview of his/her addresses.'),
    );
  }
  return $options;
}

// -------------------------------------------------------------------
// DATABASE REQUESTS
// -------------------------------------------------------------------

/**
 * Implements hook_load().
 * @param int $fid
 * @return object
 */
function uc_extra_fields_pane_field_load($fid) {
  try {
    return UCXF_FieldList::getFieldByID($fid);
  }
  catch (UCXF_Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * uc_extra_fields_pane_value_load()
 * Loads value from database
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element: order or address
 * @param int $p_iField_id
 *  id of field as known in uc_extra_fields
 * @return object
 */
function uc_extra_fields_pane_value_load($element_id, $element_type, $field_id) {
  return UCXF_Value::load($element_id, $element_type, $field_id);
}

/**
 * uc_extra_fields_pane_value_list_load()
 * Loads a list of values from database
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element: order or address
 * @return array
 */
function uc_extra_fields_pane_value_list_load($element_id, $element_type) {
  return UCXF_Value::load_list($element_id, $element_type);
}

/**
 * uc_extra_fields_pane_value_save()
 * Saves data to database
 * @param array $data
 * @return boolean
 */
function uc_extra_fields_pane_value_save($data) {
  $oValue = UCXF_Value::load($data['element_id'], $data['element_type'], $data['field_id']);
  $oValue->setValue($data['value']);
  return $oValue->save();
}

/**
 * uc_extra_fields_pane_value_delete()
 * Removes value from db
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element
 * @param int $p_iField_id
 *  id of field as known in uc_extra_fields
 * @return boolean
 */
function uc_extra_fields_pane_value_delete($element_id, $element_type, $field_id) {
  return UCXF_Value::load($element_id, $element_type, $field_id)->delete();
}

// -------------------------------------------------------------------
// FORM ALTERS
// -------------------------------------------------------------------

/**
 * Implements hook_form_FORM_ID_alter() for uc_store_address_fields_form().
 *
 * Adds enabled/required checkboxes for Extra
 * Fields Pane address fields.
 *
 * @param array $form
 * @param array $form_state
 *
 * @see uc_extra_fields_pane_address_fields_uc_store_address_fields_submit()
 */
function uc_extra_fields_pane_form_uc_store_address_fields_form_alter(&$form, $form_state) {
  try {
    $fields = UCXF_FieldList::getFieldsFromPane(array('extra_delivery', 'extra_billing'));

    // Similar to uc_store_address_fields_form() from uc_store.module
    foreach ($fields as $fieldname => $field) {
      $form['fields'][$fieldname]['enabled'] = array(
        '#type' => 'checkbox',
        '#default_value' => ($field->enabled) ? TRUE : FALSE,
      );
      $form['fields'][$fieldname]['required'] = array(
        '#type' => 'checkbox',
        '#default_value' => ($field->required) ? TRUE : FALSE,
      );
      $form['fields'][$fieldname]['default'] = array(
        '#markup' => $field->db_name,
      );
      $form['fields'][$fieldname]['title'] = array(
        '#markup' => $field->output('label'),
      );
      // Add id of field
      $form['fields'][$fieldname]['field_id'] = array(
        '#type' => 'value',
        '#value' => $field->field_id,
      );
    }

    // Add submit function so 'enabled' and 'required' can be saved.
    array_unshift($form['#submit'], 'uc_extra_fields_pane_form_uc_store_address_fields_form_submit');
  }
  catch (UCXF_Exception $e) {
    $e->printMessage();
    $e->logError();
  }
}

/**
 * Submit handler for uc_store_address_fields_form().
 *
 * Saves 'enabled' and 'required' for address fields.
 *
 * @see uc_extra_fields_pane_form_uc_store_address_fields_form_alter()
 */
function uc_extra_fields_pane_form_uc_store_address_fields_form_submit($form, &$form_state) {
  try {
    $address_fields = UCXF_FieldList::getFieldsFromPane(array('extra_delivery', 'extra_billing'));
    $fields = &$form_state['values']['fields'];
    foreach ($address_fields as $fieldname => $field) {
      db_update('uc_extra_fields')
        ->fields(array(
          'enabled' => $fields[$fieldname]['enabled'],
          'required' => $fields[$fieldname]['required'],
        ))
        ->condition('field_id', $fields[$fieldname]['field_id'])
        ->execute();

      $fields[$fieldname]['title'] = '';
    }
  }
  catch (UCXF_Exception $e) {
    $e->printMessage();
    $e->logError();
  }
}

/**
 * Alters the uc_store_address_fields_form table.
 *
 * Adds a column "Action" and action links for each
 * Extra Fields Pane address field.
 *
 * @see uc_extra_fields_pane_form_uc_store_address_fields_form_alter()
 */
function uc_extra_fields_pane_preprocess_table(&$variables) {
  // Make sure we altering the right table.
  if (!empty($variables['attributes']['id']) && $variables['attributes']['id'] == 'uc-store-address-fields-weight-table') {
    $fields = UCXF_FieldList::getFieldsFromPane(array('extra_delivery', 'extra_billing'));

    // Add column "Action" to the table.
    $variables['header'][] = t('Action');

    // For each field, add the action value.
    foreach ($variables['rows'] as $key => $row) {
      $fieldname = $row['data'][0];
      $actions = '';
      if (isset($fields[$fieldname])) {
        $field = $fields[$fieldname];
        // Add action links
        $links = array();
        if (uc_extra_fields_pane_access($field, 'edit')) {
          $links['edit'] = l(t('edit'), 'admin/store/settings/countries/fields/' . $field->field_id . '/edit');
        }
        if (uc_extra_fields_pane_access($field, 'delete')) {
          $links['delete'] = l(t('delete'), 'admin/store/settings/countries/fields/' . $field->field_id . '/delete');
        }
        if (count($links) > 0) {
          $actions = implode(' | ', $links);
        }
      }
      $variables['rows'][$key]['data'][] = $actions;
    }
  }
}

// -------------------------------------------------------------------
// MULTILANGUAGE (i18n)
// @todo Still needs to be ported, the code to be ported lives in the
// 6.x-2.x branch.
// -------------------------------------------------------------------

/**
 * Wrapper for i18nstrings() function.
 *
 * @return string
 */
function uc_extra_fields_pane_tt($name, $string, $langcode = NULL) {
  return function_exists('i18nstrings') ? i18nstrings('ucxf:' . $name, $string, $langcode) : $string;
}
